#
# pcl - Parallel Line Count
#
# Purpose: to execute line count on multiple files in parallel, then sumarize the results
# Creates a thread by core. files can be gziped (uses pigz if available).
#
# parameters: a file or several files, like in /directory/*/*gz
#
# (c) GPL v3 by Gabriel Orozco, 2016/06/03
# version 0.0.1

# -[ General Variables ]--------------------------------------------------------------------
uncompress_program="pigz -d --to-stdout"
uncompress_enabled=1
count_time=""
verbose=0
num_of_compressed_files=0
starting_seconds=${SECONDS}


export uncompress_program uncompress_enabled count_time verbose num_of_compressed_files


# -[ Functions ]---------------------------------------------------------------------------
show_help() {
cat <<EOF
   Parallel Line Count
   Written by Gabriel Orozco Ruiz Velazco. 2016/06/04. (c) GPLv3

   Usage  : plc [parameters] <files>

   Parameters:
            -d                Enables debug
            -v                Gives a verbose message at the end of the calculation
            -n <number>       Fixes the number of threads to the number specified instead
                              of the number of cores.
            -h                shows this help

   Purpose: Counts and sums all the lines in the files given in the command line.
            Creates a thread by core. files can be gziped (uses pigz if available).

   Example: plc /directory/*/*gz /directory2/*

EOF
}



# -[ Main ]--------------------------------------------------------------------------------
[[ -z "${DEBUG}" ]] || set -x

export tmp_dir=/tmp/plc-$$
mkdir -p "${tmp_dir}"
trap "rm -rf ${tmp_dir}" 0 1 9 15

# Initialize the number of threads = number of cores
number_of_threads=$(grep processor /proc/cpuinfo | wc -l)

# Determine if pigz is installed (much faster than gunzip)
which pigz >/dev/null
if [ $? -ne 0 ]; then
   # pigz is not installed. check gunzip:
   which gunzip >/dev/null
   if [ $? -eq 0 ]; then
      # gunzip found
      uncompress_program="gunzip --to-stdout"
   else
      echo "Unable to find pigz or gunzip on this machine. no compressed files are being counted"
      uncompress_enabled=0
      uncompress_program=""
   fi
fi

# Check parameters
while true; do
  case "${1}" in
    '-v') verbose=1; shift ;;
    '-d') set -x ; shift ;;
    '-n') number_of_threads=$2 ; shift ; shift ;;
    '-h') show_help ; exit 1 ;;
    *) break;;
  esac
done

# perform the parallel line counting:
# limit by number of cores. much safer and we can run several in parallel:
num_files=$#
{ while [ $# -ge 1 ]; do
    if [ ! -d "${1}" ]; then
      # make sure we do not max out processes
      while [ $(ps -a | egrep 'pigz|gunzip|cat' | wc -l) -ge ${number_of_threads} ]; do sleep 2s; done

      # determine if using the uncompress for this file
      if [[ ${1} =~ .gz ]]; then
         cat_program="${uncompress_program}"
         let num_of_compressed_files+=1
      else
         cat_program="cat"
      fi

      # send the job
      { ${cat_program} ${1} | wc -l & }
    fi

    shift

  done
  echo ${num_of_compressed_files} > ${tmp_dir}/num_of_compressed_files.txt
} | awk 'BEGIN { count=0; } { count=count+$1 } END { print count" lines" }'

ending_seconds=${SECONDS}
let seconds_elapsed=${ending_seconds}-${starting_seconds}

num_of_compressed_files=$(cat ${tmp_dir}/num_of_compressed_files.txt)
[ ${verbose} -eq 1 ] && echo "Number of Files Processed: ${num_files}, Number of compressed files: ${num_of_compressed_files}, Seconds Elapsed: ${seconds_elapsed}"
set +x

